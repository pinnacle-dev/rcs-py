# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .phone_number import PhoneNumber
from .sms_message import SmsMessage
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .basic_rcs_message import BasicRcsMessage
from .action import Action
from .media_rcs_message import MediaRcsMessage


class SendRequest_Sms(UniversalBaseModel):
    message_type: typing.Literal["sms"] = "sms"
    phone_number: typing.Optional[PhoneNumber] = None
    message: SmsMessage

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SendRequest_BasicRcs(UniversalBaseModel):
    message_type: typing.Literal["basic-rcs"] = "basic-rcs"
    phone_number: typing.Optional[PhoneNumber] = None
    message: BasicRcsMessage
    quick_replies: typing.Optional[typing.List[Action]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SendRequest_Media(UniversalBaseModel):
    message_type: typing.Literal["media"] = "media"
    message: MediaRcsMessage

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


SendRequest = typing.Union[SendRequest_Sms, SendRequest_BasicRcs, SendRequest_Media]
