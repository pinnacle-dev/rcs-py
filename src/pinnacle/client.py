# This file was auto-generated by Fern from our API Definition.

import typing
from .environment import PinnacleEnvironment
import httpx
from .core.client_wrapper import SyncClientWrapper
from .core.request_options import RequestOptions
from .types.check_rcs_capability_response import CheckRcsCapabilityResponse
from .core.pydantic_utilities import parse_obj_as
from .errors.bad_request_error import BadRequestError
from .errors.unauthorized_error import UnauthorizedError
from json.decoder import JSONDecodeError
from .core.api_error import ApiError
from .types.receive_rcs_messages_response import ReceiveRcsMessagesResponse
from .types.send_an_rcs_message_request_body import SendAnRcsMessageRequestBody
from .types.send_an_rcs_message_response import SendAnRcsMessageResponse
from .core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Pinnacle:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : PinnacleEnvironment
        The environment to use for requests from the client. from .environment import PinnacleEnvironment



        Defaults to PinnacleEnvironment.DEFAULT



    pinnacle_api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from pinnacle import Pinnacle

    client = Pinnacle(
        pinnacle_api_key="YOUR_PINNACLE_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PinnacleEnvironment = PinnacleEnvironment.DEFAULT,
        pinnacle_api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            pinnacle_api_key=pinnacle_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def check_rcs_capability(
        self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CheckRcsCapabilityResponse:
        """
        Checks if a phone number is able to receive RCS

        Parameters
        ----------
        phone_number : str
            The phone number to check for RCS capability

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckRcsCapabilityResponse
            RCS capability check successful

        Examples
        --------
        from pinnacle import Pinnacle

        client = Pinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )
        client.check_rcs_capability(
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "check_rcs",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CheckRcsCapabilityResponse,
                    parse_obj_as(
                        type_=CheckRcsCapabilityResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def receive_rcs_messages(
        self, *, webhook_url: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiveRcsMessagesResponse:
        """
        Parameters
        ----------
        webhook_url : typing.Optional[str]
            Webhook URL to receive RCS messages

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiveRcsMessagesResponse
            Webhook registration successful

        Examples
        --------
        from pinnacle import Pinnacle

        client = Pinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )
        client.receive_rcs_messages()
        """
        _response = self._client_wrapper.httpx_client.request(
            "init",
            method="POST",
            json={
                "webhook_url": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReceiveRcsMessagesResponse,
                    parse_obj_as(
                        type_=ReceiveRcsMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_an_rcs_message(
        self, *, request: SendAnRcsMessageRequestBody, request_options: typing.Optional[RequestOptions] = None
    ) -> SendAnRcsMessageResponse:
        """
        Parameters
        ----------
        request : SendAnRcsMessageRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendAnRcsMessageResponse
            Message sent successfully

        Examples
        --------
        from pinnacle import Pinnacle, RcsMessage

        client = Pinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )
        client.send_an_rcs_message(
            request=RcsMessage(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "send",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendAnRcsMessageResponse,
                    parse_obj_as(
                        type_=SendAnRcsMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPinnacle:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : PinnacleEnvironment
        The environment to use for requests from the client. from .environment import PinnacleEnvironment



        Defaults to PinnacleEnvironment.DEFAULT



    pinnacle_api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from pinnacle import AsyncPinnacle

    client = AsyncPinnacle(
        pinnacle_api_key="YOUR_PINNACLE_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PinnacleEnvironment = PinnacleEnvironment.DEFAULT,
        pinnacle_api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            pinnacle_api_key=pinnacle_api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def check_rcs_capability(
        self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> CheckRcsCapabilityResponse:
        """
        Checks if a phone number is able to receive RCS

        Parameters
        ----------
        phone_number : str
            The phone number to check for RCS capability

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckRcsCapabilityResponse
            RCS capability check successful

        Examples
        --------
        import asyncio

        from pinnacle import AsyncPinnacle

        client = AsyncPinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )


        async def main() -> None:
            await client.check_rcs_capability(
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "check_rcs",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CheckRcsCapabilityResponse,
                    parse_obj_as(
                        type_=CheckRcsCapabilityResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def receive_rcs_messages(
        self, *, webhook_url: typing.Optional[str] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiveRcsMessagesResponse:
        """
        Parameters
        ----------
        webhook_url : typing.Optional[str]
            Webhook URL to receive RCS messages

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiveRcsMessagesResponse
            Webhook registration successful

        Examples
        --------
        import asyncio

        from pinnacle import AsyncPinnacle

        client = AsyncPinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )


        async def main() -> None:
            await client.receive_rcs_messages()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "init",
            method="POST",
            json={
                "webhook_url": webhook_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ReceiveRcsMessagesResponse,
                    parse_obj_as(
                        type_=ReceiveRcsMessagesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_an_rcs_message(
        self, *, request: SendAnRcsMessageRequestBody, request_options: typing.Optional[RequestOptions] = None
    ) -> SendAnRcsMessageResponse:
        """
        Parameters
        ----------
        request : SendAnRcsMessageRequestBody

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendAnRcsMessageResponse
            Message sent successfully

        Examples
        --------
        import asyncio

        from pinnacle import AsyncPinnacle, RcsMessage

        client = AsyncPinnacle(
            pinnacle_api_key="YOUR_PINNACLE_API_KEY",
        )


        async def main() -> None:
            await client.send_an_rcs_message(
                request=RcsMessage(),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "send",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SendAnRcsMessageResponse,
                    parse_obj_as(
                        type_=SendAnRcsMessageResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: PinnacleEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
